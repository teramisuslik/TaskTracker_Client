package org.example;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.RoundRectangle2D;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;

public class LoginFrame extends JFrame {

    private JPanel contentPane;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JLabel titleLabel;
    private JLabel subtitleLabel;
    private JLabel statusLabel;
    private JLabel closeLabel;
    private JLabel minimizeLabel;
    private JPanel headerPanel;

    // URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    private static final String LOGIN_URL = "http://localhost:8080/login";
    private static final HttpClient httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(10))
            .build();

    // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    private static final Preferences prefs = Preferences.userNodeForPackage(LoginFrame.class);
    private static String jwtToken = null;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
    private int dragX, dragY;

    public LoginFrame(){
        setUndecorated(true);
        setTitle("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        setShape(new RoundRectangle2D.Double(0, 0, 1000, 700, 40, 40));

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–∫ –¥–ª—è —Å–ª–æ–µ–≤
        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setLayout(new OverlayLayout(layeredPane));

        // –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        BackgroundPanel backgroundPanel = new BackgroundPanel();
        backgroundPanel.setBounds(0, 0, 1000, 700);

        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        contentPane = new JPanel();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
        contentPane.setOpaque(false);
        contentPane.setBorder(BorderFactory.createEmptyBorder(15, 50, 40, 50));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        headerPanel = new JPanel(new BorderLayout());
        headerPanel.setOpaque(false);
        headerPanel.setMaximumSize(new Dimension(1000, 45));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));

        JPanel controlsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 8, 5));
        controlsPanel.setOpaque(false);
        controlsPanel.setPreferredSize(new Dimension(80, 35));

        minimizeLabel = createControlLabel("‚àí", new Color(155, 89, 182));
        closeLabel = createControlLabel("√ó", new Color(231, 76, 60));

        controlsPanel.add(minimizeLabel);
        controlsPanel.add(closeLabel);

        headerPanel.add(controlsPanel, BorderLayout.EAST);

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–æ—Ä–º–æ–π
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
        centerPanel.setOpaque(false);
        centerPanel.setMaximumSize(new Dimension(400, 600));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        titleLabel = new JLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 32));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        titleLabel.setHorizontalAlignment(JLabel.CENTER);

        // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitleLabel = new JLabel("–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç");
        subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subtitleLabel.setForeground(new Color(200, 200, 200));
        subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        subtitleLabel.setHorizontalAlignment(JLabel.CENTER);

        // –ü–∞–Ω–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º—ã —Å –Ω–µ–æ–º–æ—Ä—Ñ–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        JPanel formPanel = createNeomorphicPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setMaximumSize(new Dimension(400, 400));

        // –ò–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        JLabel userIcon = new JLabel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏
                GradientPaint gradient = new GradientPaint(0, 0, new Color(155, 89, 182),
                        0, getHeight(), new Color(142, 68, 173));
                g2.setPaint(gradient);
                g2.fillOval(0, 0, getWidth(), getHeight());

                g2.setFont(new Font("Segoe UI", Font.BOLD, 24));
                g2.setColor(Color.WHITE);
                FontMetrics fm = g2.getFontMetrics();
                String icon = "üë§";
                int x = (getWidth() - fm.stringWidth(icon)) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.drawString(icon, x, y);
                g2.dispose();
            }
        };
        userIcon.setPreferredSize(new Dimension(80, 80));
        userIcon.setAlignmentX(Component.CENTER_ALIGNMENT);
        userIcon.setMaximumSize(new Dimension(80, 80));

        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        JPanel usernamePanel = createInputPanel("–õ–æ–≥–∏–Ω");
        usernameField = createStyledTextField();
        usernamePanel.add(usernameField);

        JPanel passwordPanel = createInputPanel("–ü–∞—Ä–æ–ª—å");
        passwordField = createStyledPasswordField();
        passwordPanel.add(passwordField);

        // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        loginButton = new JButton("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                GradientPaint gradient = new GradientPaint(0, 0, new Color(155, 89, 182),
                        0, getHeight(), new Color(142, 68, 173));
                g2.setPaint(gradient);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 25, 25);

                g2.setColor(Color.WHITE);
                g2.setFont(getFont());
                FontMetrics fm = g2.getFontMetrics();
                String text = getText();
                int x = (getWidth() - fm.stringWidth(text)) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.drawString(text, x, y);
                g2.dispose();
            }
        };
        styleModernLoginButton(loginButton);
        loginButton.addActionListener(new LoginButtonListener());

        JPanel registrationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        registrationPanel.setOpaque(false);
        registrationPanel.setMaximumSize(new Dimension(350, 30));

        JLabel questionLabel = new JLabel("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? ");
        questionLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        questionLabel.setForeground(Color.WHITE);
        questionLabel.setOpaque(false);

        JLabel registerLabel = createClickableRegistrationLabel();

        registrationPanel.add(questionLabel);
        registrationPanel.add(registerLabel);

// –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        statusLabel = new JLabel(" ");
        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        statusLabel.setForeground(new Color(255, 255, 255, 180));
        statusLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statusLabel.setOpaque(false);

        // –°–±–æ—Ä–∫–∞ —Ñ–æ—Ä–º—ã
        formPanel.add(Box.createVerticalStrut(20));
        formPanel.add(userIcon);
        formPanel.add(Box.createVerticalStrut(30));
        formPanel.add(usernamePanel);
        formPanel.add(Box.createVerticalStrut(20));
        formPanel.add(passwordPanel);
        formPanel.add(Box.createVerticalStrut(30));
        formPanel.add(loginButton);
        formPanel.add(Box.createVerticalStrut(20));
        formPanel.add(statusLabel);
        formPanel.add(Box.createVerticalStrut(15));
        formPanel.add(registrationPanel);

        // –°–±–æ—Ä–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        centerPanel.add(Box.createVerticalStrut(20));
        centerPanel.add(titleLabel);
        centerPanel.add(Box.createVerticalStrut(5));
        centerPanel.add(subtitleLabel);
        centerPanel.add(Box.createVerticalStrut(40));
        centerPanel.add(formPanel);

        // –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        contentPane.add(headerPanel);
        contentPane.add(centerPanel);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ —Å–ª–æ–∏
        layeredPane.add(backgroundPanel, Integer.valueOf(0));
        layeredPane.add(contentPane, Integer.valueOf(1));

        setContentPane(layeredPane);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        addMouseListeners();
    }

    // –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ß–ï–†–ù–û-–§–ò–û–õ–ï–¢–û–í–´–ú –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    private class BackgroundPanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // –ß–µ—Ä–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            GradientPaint mainGradient = new GradientPaint(0, 0, new Color(25, 25, 35),
                    getWidth(), getHeight(), new Color(45, 30, 60));
            g2.setPaint(mainGradient);
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), 40, 40);

            // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            drawBubbles(g2);
        }

        private void drawBubbles(Graphics2D g2) {
            // –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ø—É–∑—ã—Ä—å–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ
            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.08f));
            g2.setColor(new Color(155, 89, 182));

            // –ë–æ–ª—å—à–æ–π –ø—É–∑—ã—Ä—å
            g2.fillOval(-50, -50, 200, 200);
            g2.fillOval(getWidth() - 100, getHeight() - 150, 300, 300);
            g2.fillOval(getWidth() - 250, 50, 150, 150);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ–ª–∫–∏–µ –ø—É–∑—ã—Ä—å–∫–∏
            g2.fillOval(100, getHeight() - 200, 100, 100);
            g2.fillOval(getWidth() - 150, 200, 80, 80);

            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));
        }
    }

    private JPanel createNeomorphicPanel() {
        return new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –¢–µ–º–Ω—ã–π –Ω–µ–æ–º–æ—Ä—Ñ–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                Color background = new Color(255, 255, 255, 10);
                g2.setColor(background);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 25, 25);

                // –ë–æ—Ä–¥–µ—Ä —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º
                g2.setStroke(new BasicStroke(1.5f));
                g2.setColor(new Color(155, 89, 182, 80));
                g2.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 25, 25);
            }
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    private JPanel createInputPanel(String labelText) {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(15, 0));
        panel.setOpaque(false);
        panel.setMaximumSize(new Dimension(350, 70));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

        // –ú–µ—Ç–∫–∞
        JLabel label = new JLabel(labelText);
        label.setFont(new Font("Segoe UI", Font.BOLD, 14));
        label.setForeground(Color.WHITE);
        label.setPreferredSize(new Dimension(70, 30));

        panel.add(label, BorderLayout.WEST);
        return panel;
    }

    // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    private JTextField createStyledTextField() {
        JTextField field = new JTextField() {
            @Override
            protected void paintComponent(Graphics g) {
                // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                super.paintComponent(g);

                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –ó–∞—Ç–µ–º —Ä–∏—Å—É–µ–º –±–æ—Ä–¥–µ—Ä –ø–æ–≤–µ—Ä—Ö
                g2.setColor(new Color(155, 89, 182, 120));
                g2.setStroke(new BasicStroke(2f));
                g2.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 15, 15);
                g2.dispose();
            }
        };

        field.setPreferredSize(new Dimension(250, 45));
        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setForeground(Color.WHITE);
        field.setCaretColor(new Color(155, 89, 182));
        field.setBackground(new Color(40, 40, 50));
        field.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        field.setOpaque(true);

        return field;
    }

    // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    private JPasswordField createStyledPasswordField() {
        JPasswordField field = new JPasswordField() {
            @Override
            protected void paintComponent(Graphics g) {
                // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                super.paintComponent(g);

                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –ó–∞—Ç–µ–º —Ä–∏—Å—É–µ–º –±–æ—Ä–¥–µ—Ä –ø–æ–≤–µ—Ä—Ö
                g2.setColor(new Color(155, 89, 182, 120));
                g2.setStroke(new BasicStroke(2f));
                g2.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 15, 15);
                g2.dispose();
            }
        };

        field.setPreferredSize(new Dimension(250, 45));
        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setForeground(Color.WHITE);
        field.setCaretColor(new Color(155, 89, 182));
        field.setBackground(new Color(40, 40, 50));
        field.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        field.setOpaque(true);

        return field;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    private JLabel createControlLabel(String text, Color color) {
        JLabel label = new JLabel(text) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // –ö—Ä—É–≥–ª–∞—è –∫–Ω–æ–ø–∫–∞ - –£–í–ï–õ–ò–ß–ò–õ–ò –†–ê–ó–ú–ï–†
                g2.setColor(color);
                g2.fillOval(2, 2, getWidth()-4, getHeight()-4); // –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã

                g2.setColor(Color.WHITE);
                g2.setFont(new Font("Segoe UI", Font.BOLD, 16));
                FontMetrics fm = g2.getFontMetrics();
                int x = (getWidth() - fm.stringWidth(getText())) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.drawString(getText(), x, y);
            }
        };
        label.setPreferredSize(new Dimension(28, 28)); // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä
        label.setMinimumSize(new Dimension(28, 28));
        label.setMaximumSize(new Dimension(28, 28));
        label.setCursor(new Cursor(Cursor.HAND_CURSOR));

        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (label == closeLabel) {
                    System.exit(0);
                } else if (label == minimizeLabel) {
                    setState(Frame.ICONIFIED);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                label.repaint();
            }
        });

        return label;
    }

    private void styleModernLoginButton(JButton button) {
        button.setPreferredSize(new Dimension(320, 50));
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.setFont(new Font("Segoe UI", Font.BOLD, 16));
        button.setForeground(Color.WHITE);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                button.repaint();
            }

            public void mouseExited(MouseEvent evt) {
                button.repaint();
            }
        });
    }

    private void addMouseListeners() {
        headerPanel.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                dragX = e.getX();
                dragY = e.getY();
            }
        });

        headerPanel.addMouseMotionListener(new MouseAdapter() {
            public void mouseDragged(MouseEvent e) {
                int x = e.getXOnScreen();
                int y = e.getYOnScreen();
                setLocation(x - dragX, y - dragY);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    public void checkAuthentication() {
        String savedToken = prefs.get("jwt_token", null);
        if (savedToken != null && !savedToken.isEmpty()) {
            jwtToken = savedToken;
            openMainApplicationFrame(jwtToken);
        } else {
            setVisible(true);
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setOpacity(0f);
            Timer fadeIn = new Timer(10, new ActionListener() {
                float opacity = 0f;
                @Override
                public void actionPerformed(ActionEvent e) {
                    opacity += 0.05f;
                    if (opacity >= 1f) {
                        opacity = 1f;
                        ((Timer)e.getSource()).stop();
                    }
                    setOpacity(opacity);
                }
            });
            fadeIn.start();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    private class LoginButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();

            if (username.isEmpty() || password.isEmpty()) {
                showStatus("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", new Color(231, 76, 60));
                shakeAnimation();
                return;
            }

            loginButton.setEnabled(false);
            showStatus("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...", new Color(155, 89, 182));

            // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            startLoadingAnimation();

            new Thread(() -> {
                try {
                    String response = sendLoginRequest(username, password);
                    SwingUtilities.invokeLater(() -> {
                        stopLoadingAnimation();
                        handleServerResponse(response, username);
                    });
                } catch (Exception ex) {
                    SwingUtilities.invokeLater(() -> {
                        stopLoadingAnimation();
                        showStatus("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + ex.getMessage(), new Color(231, 76, 60));
                        loginButton.setEnabled(true);
                        shakeAnimation();
                    });
                }
            }).start();
        }

        private String sendLoginRequest(String username, String password) throws IOException, InterruptedException {
            String jsonBody = String.format(
                    "{\"username\": \"%s\", \"password\": \"%s\"}",
                    username, password
            );

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(LOGIN_URL))
                    .header("Content-Type", "application/json")
                    .header("Accept", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .timeout(Duration.ofSeconds(15))
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        }

        private void handleServerResponse(String response, String username) {
            loginButton.setEnabled(true);

            try {
                if (response.contains("\"token\"")) {
                    String token = extractTokenFromResponse(response);

                    if (token != null && !token.isEmpty()) {
                        saveToken(token);
                        onAuthorizationSuccess(); // ‚Üê –í–û–¢ –¢–£–¢ –í–´–ó–´–í–ê–ï–ú –ù–ê–® –ú–ï–¢–û–î

                        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                        successAnimation();

                        Timer timer = new Timer(1000, evt -> {
                            openMainApplicationFrame(token);
                        });
                        timer.setRepeats(false);
                        timer.start();
                    } else {
                        showStatus("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ", new Color(231, 76, 60));
                        shakeAnimation();
                    }
                } else if (response.contains("error") || response.contains("Unauthorized")) {
                    showStatus("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", new Color(231, 76, 60));
                    shakeAnimation();
                } else {
                    showStatus("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", new Color(231, 76, 60));
                    shakeAnimation();
                }
            } catch (Exception ex) {
                showStatus("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞", new Color(231, 76, 60));
                shakeAnimation();
            }
        }

        private String extractTokenFromResponse(String response) {
            try {
                int tokenStart = response.indexOf("\"token\":\"") + 9;
                if (tokenStart < 9) {
                    tokenStart = response.indexOf("\"token\": \"") + 10;
                }

                if (tokenStart > 8) {
                    int tokenEnd = response.indexOf("\"", tokenStart);
                    if (tokenEnd > tokenStart) {
                        return response.substring(tokenStart, tokenEnd);
                    }
                }
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
            }
            return null;
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    private void shakeAnimation() {
        Timer shakeTimer = new Timer(20, new ActionListener() {
            int count = 0;
            int originalX = contentPane.getX();

            @Override
            public void actionPerformed(ActionEvent e) {
                if (count < 10) {
                    int offset = (count % 2 == 0) ? 5 : -5;
                    contentPane.setLocation(originalX + offset, contentPane.getY());
                    count++;
                } else {
                    contentPane.setLocation(originalX, contentPane.getY());
                    ((Timer)e.getSource()).stop();
                }
            }
        });
        shakeTimer.start();
    }

    private void successAnimation() {
        loginButton.repaint();
    }

    private void openRegistrationFrame() {
        RegistrationFrame registrationFrame = new RegistrationFrame();
        registrationFrame.setVisible(true);
    }

    private void saveToken(String token) {
        jwtToken = token;
        prefs.put("jwt_token", token);
        System.out.println("–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + token.substring(0, Math.min(20, token.length())) + "...");
    }

    public static String getJwtToken() {
        if (jwtToken == null) {
            jwtToken = prefs.get("jwt_token", null);
        }
        return jwtToken;
    }

    public static void clearToken() {
        jwtToken = null;
        prefs.remove("jwt_token");
        System.out.println("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω");
    }


    private void openMainApplicationFrame(String token) {
        Timer fadeOutTimer = new Timer(20, new ActionListener() {
            float opacity = 1f;
            @Override
            public void actionPerformed(ActionEvent e) {
                opacity -= 0.05f;
                if (opacity <= 0f) {
                    opacity = 0f;
                    ((Timer) e.getSource()).stop();

                    setVisible(false);
                    dispose();

                    Map<String, Object> userInfo = getUserInfo(token);
                    String role = (userInfo != null && userInfo.containsKey("role")) ?
                            userInfo.get("role").toString() : "USER";

                    JFrame newFrame;
                    if ("ADMIN".equals(role.toUpperCase())) {
                        newFrame = new AdminApplicationFrame(token, userInfo);
                    } else {
                        newFrame = new UserApplicationFrame(token, userInfo);
                    }
                    newFrame.setVisible(true);
                }
                setOpacity(opacity);
            }
        });
        fadeOutTimer.start();
    }

    private Map<String, Object> getUserInfo(String token) {
        try {
            String username = getUsernameFromTokenDirect(token);
            if (username == null) return null;

            HttpClient client = HttpClient.newHttpClient();
            String url = "http://localhost:8080/userwithouttasks?username=" +
                    java.net.URLEncoder.encode(username, "UTF-8");

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + token)
                    .header("Accept", "application/json")
                    .GET()
                    .timeout(Duration.ofSeconds(10))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                return parseUserInfo(response.body());
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + e.getMessage());
        }
        return null;
    }

    private String getUsernameFromTokenDirect(String token) {
        try {
            String[] parts = token.split("\\.");
            if (parts.length >= 2) {
                String payload = new String(java.util.Base64.getUrlDecoder().decode(parts[1]));

                int subStart = payload.indexOf("\"sub\":\"");
                if (subStart != -1) {
                    subStart += 7;
                    int subEnd = payload.indexOf("\"", subStart);
                    if (subEnd > subStart) {
                        return payload.substring(subStart, subEnd);
                    }
                }

                int usernameStart = payload.indexOf("\"username\":\"");
                if (usernameStart != -1) {
                    usernameStart += 12;
                    int usernameEnd = payload.indexOf("\"", usernameStart);
                    if (usernameEnd > usernameStart) {
                        return payload.substring(usernameStart, usernameEnd);
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username –∏–∑ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
        }
        return null;
    }

    private Map<String, Object> parseUserInfo(String jsonResponse) {
        try {
            Map<String, Object> userInfo = new HashMap<>();

            if (jsonResponse.contains("\"username\"")) {
                int usernameIndex = jsonResponse.indexOf("\"username\"");
                if (usernameIndex != -1) {
                    int colonIndex = jsonResponse.indexOf(":", usernameIndex);
                    if (colonIndex != -1) {
                        int valueStart = colonIndex + 1;
                        while (valueStart < jsonResponse.length() && Character.isWhitespace(jsonResponse.charAt(valueStart))) {
                            valueStart++;
                        }
                        if (valueStart < jsonResponse.length()) {
                            if (jsonResponse.charAt(valueStart) == '"') {
                                valueStart++;
                                int valueEnd = jsonResponse.indexOf("\"", valueStart);
                                if (valueEnd != -1) {
                                    String username = jsonResponse.substring(valueStart, valueEnd);
                                    userInfo.put("username", username);
                                }
                            }
                        }
                    }
                }
            }

            String role = extractRoleFromJson(jsonResponse);
            userInfo.put("role", role);
            return userInfo;
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + e.getMessage());
        }
        return null;
    }

    private String extractRoleFromJson(String jsonResponse) {
        try {
            String[] rolePatterns = {
                    "\"role\":\"([^\"]+)\"",
                    "\"role\": \"([^\"]+)\"",
                    "\"authority\":\"([^\"]+)\"",
                    "\"authority\": \"([^\"]+)\""
            };

            for (String pattern : rolePatterns) {
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
                java.util.regex.Matcher m = p.matcher(jsonResponse);
                if (m.find()) {
                    String foundRole = m.group(1);
                    return normalizeRole(foundRole);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–æ–ª–∏: " + e.getMessage());
        }
        return "USER";
    }

    private String normalizeRole(String role) {
        if (role == null) return "USER";
        role = role.toUpperCase().trim();
        if (role.startsWith("ROLE_")) {
            role = role.substring(5);
        }
        if ("ADMIN".equals(role) || "USER".equals(role)) {
            return role;
        }
        return "USER";
    }

    private JLabel createClickableRegistrationLabel() {
        JLabel registrationLabel = new JLabel("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ");
        registrationLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
        registrationLabel.setForeground(new Color(155, 89, 182));
        registrationLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registrationLabel.setOpaque(false);

        registrationLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                openRegistrationFrame();
            }
        });

        return registrationLabel;
    }


    private void showStatus(String message, Color color) {
        if (statusLabel != null) {
            statusLabel.setText(message);
            statusLabel.setForeground(color);

            // –î–µ–ª–∞–µ–º –º–µ—Ç–∫—É –Ω–µ–≤–∏–¥–∏–º–æ–π –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π
            statusLabel.setVisible(message != null && !message.trim().isEmpty());
        }
    }

    private void startLoadingAnimation() {
        showStatus("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä", new Color(155, 89, 182));
    }

    private void stopLoadingAnimation() {
        showStatus("", Color.BLACK);
    }

    private void removeDuplicateButtons() {
        if (loginButton != null) {
            // –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            loginButton.setEnabled(false);
            loginButton.setVisible(false);
        }
    }
    private void onAuthorizationSuccess() {
        stopLoadingAnimation();
        showStatus("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", new Color(46, 204, 113));

        // –í–º–µ—Å—Ç–æ —Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–µ–º –µ–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        if (loginButton != null) {
            loginButton.setEnabled(false);
            loginButton.setText("‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π
            loginButton.repaint();
        }
    }
}